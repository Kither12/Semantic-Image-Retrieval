// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: ModelService.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	TextEmbedding(ctx context.Context, in *TextEmbeddingRequest, opts ...grpc.CallOption) (*TextEmbeddingResponse, error)
	ImageEmbedding(ctx context.Context, opts ...grpc.CallOption) (ModelService_ImageEmbeddingClient, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) TextEmbedding(ctx context.Context, in *TextEmbeddingRequest, opts ...grpc.CallOption) (*TextEmbeddingResponse, error) {
	out := new(TextEmbeddingResponse)
	err := c.cc.Invoke(ctx, "/ModelService/TextEmbedding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ImageEmbedding(ctx context.Context, opts ...grpc.CallOption) (ModelService_ImageEmbeddingClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelService_ServiceDesc.Streams[0], "/ModelService/ImageEmbedding", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelServiceImageEmbeddingClient{stream}
	return x, nil
}

type ModelService_ImageEmbeddingClient interface {
	Send(*ImageEmbeddingRequest) error
	CloseAndRecv() (*ImageEmbeddingResponse, error)
	grpc.ClientStream
}

type modelServiceImageEmbeddingClient struct {
	grpc.ClientStream
}

func (x *modelServiceImageEmbeddingClient) Send(m *ImageEmbeddingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelServiceImageEmbeddingClient) CloseAndRecv() (*ImageEmbeddingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageEmbeddingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations should embed UnimplementedModelServiceServer
// for forward compatibility
type ModelServiceServer interface {
	TextEmbedding(context.Context, *TextEmbeddingRequest) (*TextEmbeddingResponse, error)
	ImageEmbedding(ModelService_ImageEmbeddingServer) error
}

// UnimplementedModelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (UnimplementedModelServiceServer) TextEmbedding(context.Context, *TextEmbeddingRequest) (*TextEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextEmbedding not implemented")
}
func (UnimplementedModelServiceServer) ImageEmbedding(ModelService_ImageEmbeddingServer) error {
	return status.Errorf(codes.Unimplemented, "method ImageEmbedding not implemented")
}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_TextEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).TextEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ModelService/TextEmbedding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).TextEmbedding(ctx, req.(*TextEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ImageEmbedding_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServiceServer).ImageEmbedding(&modelServiceImageEmbeddingServer{stream})
}

type ModelService_ImageEmbeddingServer interface {
	SendAndClose(*ImageEmbeddingResponse) error
	Recv() (*ImageEmbeddingRequest, error)
	grpc.ServerStream
}

type modelServiceImageEmbeddingServer struct {
	grpc.ServerStream
}

func (x *modelServiceImageEmbeddingServer) SendAndClose(m *ImageEmbeddingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelServiceImageEmbeddingServer) Recv() (*ImageEmbeddingRequest, error) {
	m := new(ImageEmbeddingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextEmbedding",
			Handler:    _ModelService_TextEmbedding_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImageEmbedding",
			Handler:       _ModelService_ImageEmbedding_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ModelService.proto",
}
